---
name: Release on version

on: 
  push:
    tags:
      - "*"

jobs:

  update-galaxy-version:
    name: Update Galaxy Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
         fetch-depth: 0

      - name: Push changes back to github
        run: |
          pip3 install yq --user
          yq -i -y '.version = "${{ github.ref_name }}"' ./galaxy.yml 

          git remote set-head origin --auto
          git checkout main
          git config --global user.name "Rob Harris"
          git config --global user.email "harrisrp95@gmail.com"

          git add -A
          git commit -m "Update Ansible Galaxy version"
          git push 

  super-lint:
    name: "Lint code base"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Super-Linter
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  molecule:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        scenario:
          - default
    steps:
      - uses: actions/checkout@v3
        with:
          path: "${{ github.repository }}"
      - uses: gofrolist/molecule-action@v2
        with:
          molecule_working_dir: "${{ github.repository }}/roles/hello_world"
          molecule_command: test
          molecule_args: --scenario-name ${{ matrix.scenario }}
        env:
          ANSIBLE_FORCE_COLOR: '1'

  test-yaml-reader:
    runs-on: ubuntu-latest
    name: Test read-yaml
    steps:
      - uses: actions/checkout@v3
      - name: gather collection info
        run: |
          pip3 install yq --user
          COLLECTION_NAME=$(yq -r '.name' ./galaxy.yml)
          COLLECTION_NAMESPACE=$(yq -r '.namespace' ./galaxy.yml)
          export COLLECTION_NAME
          export COLLECTION_NAMESPACE
          echo "name=$COLLECTION_NAME" >> $GITHUB_ENV
          echo "namespace=$COLLECTION_NAMESPACE" >> $GITHUB_ENV

      - name: Print out the GitHUB_ENV
        run: | 
          echo "name is "${{ env.name }}""
          echo "namespace is "${{ env.namespace }}""
          echo "Repository URL "${{ github.repositoryUrl }}""
